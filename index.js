(()=>{"use strict";var t={506:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(t=""){super(),this._text="",this.nextIndex=1,this._text=t;const e=document.createElement("template");e.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}get text(){return this._text}connectedCallback(){""==this._text&&(this._text=this.getAttribute("text")),this.calculateNextIndex(),this.editSup(),this.editSub()}calculateNextIndex(){const t=document.querySelector("article").querySelectorAll("foot-note").length;this.nextIndex=t}editSup(){const t=this.shadowRoot.querySelector("a");t.innerHTML=this.nextIndex.toString(),t.href="#footnote-"+this.nextIndex.toString(),this.shadowRoot.querySelector("sup").id="footnote-base-"+this.nextIndex.toString()}editSub(){const t=document.createElement("a");t.innerHTML=this.nextIndex.toString(),t.href="#footnote-base-"+this.nextIndex.toString(),t.style.color=n.anchorColor;const e=document.createElement("sub");e.id="footnote-"+this.nextIndex.toString(),e.innerHTML=": "+this._text,e.prepend(t),document.querySelector("article").append(e)}}e.default=n,n.tag="foot-note",n.anchorColor="#D9C07B",n.template=`\n    <style>\n      a {\n        color: ${n.anchorColor};\n        text-decoration: none;\n      }\n      sup {\n        color: ${n.anchorColor};\n      }\n    </style>\n    <sup><a></a></sup>\n  `},576:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(t="",e=""){super(),this._link=t,this._text=e;const o=document.createElement("template");o.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(o.content.cloneNode(!0))}get link(){return this._link}get text(){return this._text}connectedCallback(){if(""==this._link||""==this._text){this._link=this.getAttribute("link"),this._text=this.getAttribute("text");const t=this.shadowRoot.querySelector("a");t.href=this._link,t.text=this._text}}}e.default=n,n.tag="local-link",n.template="\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    <a></a>\n  "},607:function(t,e,n){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=o(n(506)),i=o(n(576));customElements.define(i.default.tag,i.default),customElements.define(s.default.tag,s.default)}},e={};!function n(o){if(e[o])return e[o].exports;var s=e[o]={exports:{}};return t[o].call(s.exports,s,s.exports,n),s.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,