(()=>{"use strict";var t={692:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super();const t=document.createElement("template");t.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0))}connectedCallback(){const t=document.querySelectorAll("sub"),e=this.shadowRoot.querySelector("footer"),n=t.length;for(let o=0;o<n;o++)e.appendChild(t[o]),e.append(document.createElement("br"))}}e.default=n,n.tag="article-footer",n.template="\n    <style>\n      hr {\n        margin-left: 0px;\n        border: none;\n        max-width: 150px;\n        width: 35vw;\n        height: 0.75px;\n        color: var(--text-color);\n        background-color: var(--text-color);\n      }\n      a {\n        color: #95c379;\n        text-decoration: none;\n      }\n    </style>\n    <br />\n    <br />\n    <br />\n    <hr />\n    <footer></footer>\n  "},384:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super();const t=document.createElement("template");t.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0))}}e.default=n,n.tag="fanaro-nav",n.template='\n    <style>\n      a {\n        display: inline-flex;\n        align-items: center;\n        font-size: 1.5rem;\n        color: var(--text-color);\n        text-decoration: none;\n      }\n      svg {\n        padding-right: 10px;\n      }\n    </style>\n    <nav>\n      <a href="/">\n        <svg width="50" height="50">\n          <image width="50" height="50" href="../../assets/favicon.svg" />\n        </svg>\n        <h1>fanaro.io</h1>\n      </a>\n    </nav>\n  '},506:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(t=""){super(),this._text="",this.nextIndex=1,this.calculateNextIndex=()=>{const t=document.querySelector("article").querySelectorAll("foot-note").length;this.nextIndex=t},this.editSup=()=>{const t=this.shadowRoot.querySelector("a");t.innerHTML=this.nextIndex.toString(),t.href="#footnote-"+this.nextIndex.toString(),this.shadowRoot.querySelector("sup").id="footnote-base-"+this.nextIndex.toString()},this.editSub=()=>{const t=document.createElement("a");t.innerHTML=this.nextIndex.toString(),t.href="#footnote-base-"+this.nextIndex.toString(),t.style.color=n.anchorColor;const e=document.createElement("sub");e.id="footnote-"+this.nextIndex.toString(),e.innerHTML=": "+this._text,e.prepend(t),document.querySelector("article").append(e)},this._text=t;const e=document.createElement("template");e.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}get text(){return this._text}connectedCallback(){""==this._text&&(this._text=this.getAttribute("text")),this.calculateNextIndex(),this.editSup(),this.editSub()}}e.default=n,n.tag="foot-note",n.anchorColor="#D9C07B",n.template=`\n    <style>\n      a {\n        color: ${n.anchorColor};\n        text-decoration: none;\n      }\n      sup {\n        color: ${n.anchorColor};\n      }\n    </style>\n    <sup><a></a></sup>\n  `},576:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(t="",e=""){super(),this._link=t,this._text=e;const o=document.createElement("template");o.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(o.content.cloneNode(!0))}get link(){return this._link}get text(){return this._text}connectedCallback(){if(""==this._link||""==this._text){this._link=this.getAttribute("link"),this._text=this.getAttribute("text");const t=this.shadowRoot.querySelector("a");t.href=this._link,t.text=this._text}}}e.default=n,n.tag="local-link",n.template="\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    <a></a>\n  "},607:function(t,e,n){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=o(n(692)),a=o(n(384)),l=o(n(506)),s=o(n(576));customElements.define(s.default.tag,s.default),customElements.define(l.default.tag,l.default),customElements.define(r.default.tag,r.default),customElements.define(a.default.tag,a.default)}},e={};!function n(o){if(e[o])return e[o].exports;var r=e[o]={exports:{}};return t[o].call(r.exports,r,r.exports,n),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvY29tcG9uZW50cy9hcnRpY2xlX2Zvb3Rlci50cyIsIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvY29tcG9uZW50cy9mYW5hcm9fbmF2LnRzIiwid2VicGFjazovL2ZhbmFyby5pby8uL3NyYy9jb21wb25lbnRzL2Zvb3Rub3RlLnRzIiwid2VicGFjazovL2ZhbmFyby5pby8uL3NyYy9jb21wb25lbnRzL2xvY2FsX2xpbmsudHMiLCJ3ZWJwYWNrOi8vZmFuYXJvLmlvLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL2ZhbmFyby5pby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mYW5hcm8uaW8vd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXJ0aWNsZUZvb3RlckVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInN1cGVyIiwidGVtcGxhdGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJ0aGlzIiwiYXR0YWNoU2hhZG93IiwibW9kZSIsInNoYWRvd1Jvb3QiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJmb290bm90ZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9vdGVyIiwicXVlcnlTZWxlY3RvciIsImZvb3Rub3Rlc0xlbmd0aCIsImxlbmd0aCIsImkiLCJhcHBlbmQiLCJkZWZhdWx0IiwidGFnIiwiRmFuYXJvTmF2RWxlbWVudCIsIkZvb3Rub3RlRWxlbWVudCIsInRleHQiLCJfdGV4dCIsIm5leHRJbmRleCIsImNhbGN1bGF0ZU5leHRJbmRleCIsIm51bWJlck9mRm9vdG5vdGVzIiwiZWRpdFN1cCIsInN1cEFuY2hvciIsInRvU3RyaW5nIiwiaHJlZiIsImlkIiwiZWRpdFN1YiIsInN1YkFuY2hvciIsInN0eWxlIiwiY29sb3IiLCJhbmNob3JDb2xvciIsInN1YiIsInByZXBlbmQiLCJnZXRBdHRyaWJ1dGUiLCJMb2NhbExpbmtFbGVtZW50IiwibGluayIsIl9saW5rIiwiaW5uZXJBbmNob3IiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiYXJ0aWNsZV9mb290ZXJfMSIsImZhbmFyb19uYXZfMSIsImZvb3Rub3RlXzEiLCJsb2NhbF9saW5rXzEiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIl0sIm1hcHBpbmdzIjoic0NBQ0FBLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELE1BQU1DLFVBQTZCQyxZQUMvQixjQUNJQyxRQUNBLE1BQU1DLEVBQVdDLFNBQVNDLGNBQWMsWUFDeENGLEVBQVNHLFVBQVlOLEVBQXFCRyxTQUMxQ0ksS0FBS0MsYUFBYSxDQUFFQyxLQUFNLFNBQzFCRixLQUFLRyxXQUFXQyxZQUFZUixFQUFTUyxRQUFRQyxXQUFVLElBRTNELG9CQUNJLE1BQU1DLEVBQVlWLFNBQVNXLGlCQUFpQixPQUN0Q0MsRUFBU1QsS0FBS0csV0FBV08sY0FBYyxVQUN2Q0MsRUFBa0JKLEVBQVVLLE9BQ2xDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRixFQUFpQkUsSUFDakNKLEVBQU9MLFlBQVlHLEVBQVVNLElBQzdCSixFQUFPSyxPQUFPakIsU0FBU0MsY0FBYyxRQUlqRFAsRUFBUXdCLFFBQVV0QixFQUNsQkEsRUFBcUJ1QixJQUFNLGlCQUMzQnZCLEVBQXFCRyxTQUFXLHlaLFlDckJoQ1AsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsTUFBTXlCLFVBQXlCdkIsWUFDM0IsY0FDSUMsUUFDQSxNQUFNQyxFQUFXQyxTQUFTQyxjQUFjLFlBQ3hDRixFQUFTRyxVQUFZa0IsRUFBaUJyQixTQUN0Q0ksS0FBS0MsYUFB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QnpDLFNBQVcsNkgsb0JDN0I1QixJQUFJNkMsRUFBbUJ6QyxNQUFRQSxLQUFLeUMsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUlDLFdBQWNELEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHJELE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELE1BQU1vRCxFQUFtQkgsRUFBZ0IsRUFBUSxNQUMzQ0ksRUFBZUosRUFBZ0IsRUFBUSxNQUN2Q0ssRUFBYUwsRUFBZ0IsRUFBUSxNQUNyQ00sRUFBZU4sRUFBZ0IsRUFBUSxNQUM3Q08sZUFBZUMsT0FBT0YsRUFBYWhDLFFBQVFDLElBQUsrQixFQUFhaEMsU0FDN0RpQyxlQUFlQyxPQUFPSCxFQUFXL0IsUUFBUUMsSUFBSzhCLEVBQVcvQixTQUN6RGlDLGVBQWVDLE9BQU9MLEVBQWlCN0IsUUFBUUMsSUFBSzRCLEVBQWlCN0IsU0FDckVpQyxlQUFlQyxPQUFPSixFQUFhOUIsUUFBUUMsSUFBSzZCLEVBQWE5QixXQ1h6RG1DLEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVU3RCxRQUczQyxJQUFJOEQsRUFBU0gsRUFBeUJFLEdBQVksQ0FHakQ3RCxRQUFTLElBT1YsT0FIQStELEVBQW9CRixHQUFVRyxLQUFLRixFQUFPOUQsUUFBUzhELEVBQVFBLEVBQU85RCxRQUFTNEQsR0FHcEVFLEVBQU85RCxRQ2pCZjRELENBQW9CLE0iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBBcnRpY2xlRm9vdGVyRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XHJcbiAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gQXJ0aWNsZUZvb3RlckVsZW1lbnQudGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcclxuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgfVxyXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgY29uc3QgZm9vdG5vdGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN1YlwiKTtcclxuICAgICAgICBjb25zdCBmb290ZXIgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcImZvb3RlclwiKTtcclxuICAgICAgICBjb25zdCBmb290bm90ZXNMZW5ndGggPSBmb290bm90ZXMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9vdG5vdGVzTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm9vdGVyLmFwcGVuZENoaWxkKGZvb3Rub3Rlc1tpXSk7XHJcbiAgICAgICAgICAgIGZvb3Rlci5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gQXJ0aWNsZUZvb3RlckVsZW1lbnQ7XHJcbkFydGljbGVGb290ZXJFbGVtZW50LnRhZyA9IFwiYXJ0aWNsZS1mb290ZXJcIjtcclxuQXJ0aWNsZUZvb3RlckVsZW1lbnQudGVtcGxhdGUgPSBgXG4gICAgPHN0eWxlPlxuICAgICAgaHIge1xuICAgICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIG1heC13aWR0aDogMTUwcHg7XG4gICAgICAgIHdpZHRoOiAzNXZ3O1xuICAgICAgICBoZWlnaHQ6IDAuNzVweDtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcbiAgICAgIH1cbiAgICAgIGEge1xuICAgICAgICBjb2xvcjogIzk1YzM3OTtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG4gICAgPGhyIC8+XG4gICAgPGZvb3Rlcj48L2Zvb3Rlcj5cbiAgYDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhKMGFXTnNaVjltYjI5MFpYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTloY25ScFkyeGxYMlp2YjNSbGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFMUJRWEZDTEc5Q1FVRnhRaXhUUVVGUkxGZEJRVmM3U1VFd1FqTkVPMUZCUTBVc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRlVpeE5RVUZOTEZGQlFWRXNSMEZCZDBJc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTjZSU3hSUVVGUkxFTkJRVU1zVTBGQlV5eEhRVUZITEc5Q1FVRnZRaXhEUVVGRExGRkJRVkVzUTBGQlF6dFJRVVZ1UkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRjRU1zU1VGQlNTeERRVUZETEZWQlFWY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOcVJTeERRVUZETzBsQlJVUXNhVUpCUVdsQ08xRkJRMllzVFVGQlRTeFRRVUZUTEVkQlFUUkNMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZEYkVVc1MwRkJTeXhEUVVOTUxFTkJRVU03VVVGRFNDeE5RVUZOTEUxQlFVMHNSMEZCWjBJc1NVRkJTU3hEUVVGRExGVkJRVmNzUTBGQlF5eGhRVUZoTEVOQlFVTXNVVUZCVVN4RFFVRkZMRU5CUVVNN1VVRkRkRVVzVFVGQlRTeGxRVUZsTEVkQlFWY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVOcVJDeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzWlVGQlpTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMWxCUTNoRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGFrTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkROME03U1VGRFNDeERRVUZET3p0QlFUbERTQ3gxUTBFclEwTTdRVUU1UTJsQ0xIZENRVUZITEVkQlFWY3NaMEpCUVdkQ0xFTkJRVU03UVVGRmRrSXNOa0pCUVZFc1IwRkJWenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBkQmNVSXhReXhEUVVGREluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBGYW5hcm9OYXZFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcclxuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBGYW5hcm9OYXZFbGVtZW50LnRlbXBsYXRlO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XHJcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBGYW5hcm9OYXZFbGVtZW50O1xyXG5GYW5hcm9OYXZFbGVtZW50LnRhZyA9IFwiZmFuYXJvLW5hdlwiO1xyXG5GYW5hcm9OYXZFbGVtZW50LnRlbXBsYXRlID0gYFxuICAgIDxzdHlsZT5cbiAgICAgIGEge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgfVxuICAgICAgc3ZnIHtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuICAgIDxuYXY+XG4gICAgICA8YSBocmVmPVwiL1wiPlxuICAgICAgICA8c3ZnIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCI1MFwiPlxuICAgICAgICAgIDxpbWFnZSB3aWR0aD1cIjUwXCIgaGVpZ2h0PVwiNTBcIiBocmVmPVwiLi4vLi4vYXNzZXRzL2Zhdmljb24uc3ZnXCIgLz5cbiAgICAgICAgPC9zdmc+XG4gICAgICAgIDxoMT5mYW5hcm8uaW88L2gxPlxuICAgICAgPC9hPlxuICAgIDwvbmF2PlxuICBgO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labUZ1WVhKdlgyNWhkaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTlqYjIxd2IyNWxiblJ6TDJaaGJtRnliMTl1WVhZdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4TlFVRnhRaXhuUWtGQmFVSXNVMEZCVVN4WFFVRlhPMGxCTUVKMlJEdFJRVU5GTEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUlZJc1RVRkJUU3hSUVVGUkxFZEJRWGRDTEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGVrVXNVVUZCVVN4RFFVRkRMRk5CUVZNc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkZMME1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzQkRMRWxCUVVrc1EwRkJReXhWUVVGWExFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYWtVc1EwRkJRenM3UVVGc1EwZ3NiVU5CYlVORE8wRkJiRU5wUWl4dlFrRkJSeXhIUVVGWExGbEJRVmtzUTBGQlF6dEJRVVZ1UWl4NVFrRkJVU3hIUVVGWE96czdPenM3T3pzN096czdPenM3T3pzN096czdSMEZ4UWpGRExFTkJRVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNsYXNzIEZvb3Rub3RlRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHRleHQgPSBcIlwiKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl90ZXh0ID0gXCJcIjtcclxuICAgICAgICB0aGlzLm5leHRJbmRleCA9IDE7XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVOZXh0SW5kZXggPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFydGljbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYXJ0aWNsZVwiKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEZvb3Rub3RlcyA9IGFydGljbGUucXVlcnlTZWxlY3RvckFsbChcImZvb3Qtbm90ZVwiKTtcclxuICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZGb290bm90ZXMgPSBjdXJyZW50Rm9vdG5vdGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5uZXh0SW5kZXggPSBudW1iZXJPZkZvb3Rub3RlcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZWRpdFN1cCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc3VwQW5jaG9yID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCJhXCIpO1xyXG4gICAgICAgICAgICBzdXBBbmNob3IuaW5uZXJIVE1MID0gdGhpcy5uZXh0SW5kZXgudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgc3VwQW5jaG9yLmhyZWYgPSBcIiNmb290bm90ZS1cIiArIHRoaXMubmV4dEluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN1cCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwic3VwXCIpO1xyXG4gICAgICAgICAgICBzdXAuaWQgPSBcImZvb3Rub3RlLWJhc2UtXCIgKyB0aGlzLm5leHRJbmRleC50b1N0cmluZygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5lZGl0U3ViID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzdWJBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICAgICAgc3ViQW5jaG9yLmlubmVySFRNTCA9IHRoaXMubmV4dEluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHN1YkFuY2hvci5ocmVmID0gXCIjZm9vdG5vdGUtYmFzZS1cIiArIHRoaXMubmV4dEluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHN1YkFuY2hvci5zdHlsZS5jb2xvciA9IEZvb3Rub3RlRWxlbWVudC5hbmNob3JDb2xvcjtcclxuICAgICAgICAgICAgY29uc3Qgc3ViID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN1YlwiKTtcclxuICAgICAgICAgICAgc3ViLmlkID0gXCJmb290bm90ZS1cIiArIHRoaXMubmV4dEluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHN1Yi5pbm5lckhUTUwgPSBcIjogXCIgKyB0aGlzLl90ZXh0O1xyXG4gICAgICAgICAgICBzdWIucHJlcGVuZChzdWJBbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCBhcnRpY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFydGljbGVcIik7XHJcbiAgICAgICAgICAgIGFydGljbGUuYXBwZW5kKHN1Yik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dDtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcclxuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBGb290bm90ZUVsZW1lbnQudGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcclxuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgICB9XHJcbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dCA9PSBcIlwiKVxyXG4gICAgICAgICAgICB0aGlzLl90ZXh0ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0ZXh0XCIpO1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlTmV4dEluZGV4KCk7XHJcbiAgICAgICAgdGhpcy5lZGl0U3VwKCk7XHJcbiAgICAgICAgdGhpcy5lZGl0U3ViKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gRm9vdG5vdGVFbGVtZW50O1xyXG5Gb290bm90ZUVsZW1lbnQudGFnID0gXCJmb290LW5vdGVcIjtcclxuRm9vdG5vdGVFbGVtZW50LmFuY2hvckNvbG9yID0gXCIjRDlDMDdCXCI7XHJcbkZvb3Rub3RlRWxlbWVudC50ZW1wbGF0ZSA9IGBcbiAgICA8c3R5bGU+XG4gICAgICBhIHtcbiAgICAgICAgY29sb3I6ICR7Rm9vdG5vdGVFbGVtZW50LmFuY2hvckNvbG9yfTtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgfVxuICAgICAgc3VwIHtcbiAgICAgICAgY29sb3I6ICR7Rm9vdG5vdGVFbGVtZW50LmFuY2hvckNvbG9yfTtcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuICAgIDxzdXA+PGE+PC9hPjwvc3VwPlxuICBgO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labTl2ZEc1dmRHVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTltYjI5MGJtOTBaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRTFCUVhGQ0xHVkJRV2RDTEZOQlFWRXNWMEZCVnp0SlFYbENkRVFzV1VGQldTeFBRVUZsTEVWQlFVVTdVVUZETTBJc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGU1JpeFZRVUZMTEVkQlFWY3NSVUZCUlN4RFFVRkRPMUZCUTI1Q0xHTkJRVk1zUjBGQlZ5eERRVUZETEVOQlFVTTdVVUY1UW5SQ0xIVkNRVUZyUWl4SFFVRkhMRWRCUVZNc1JVRkJSVHRaUVVOMFF5eE5RVUZOTEU5QlFVOHNSMEZCWjBJc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVVXNRMEZCUXp0WlFVTm9SU3hOUVVGTkxHZENRVUZuUWl4SFFVRkhMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WFFVRlhMRU5CUVVVc1EwRkJRenRaUVVOb1JTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGWExHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1EwRkJRenRaUVVNeFJDeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMR2xDUVVGcFFpeERRVUZETzFGQlEzSkRMRU5CUVVNc1EwRkJRVHRSUVVWUExGbEJRVThzUjBGQlJ5eEhRVUZUTEVWQlFVVTdXVUZETTBJc1RVRkJUU3hUUVVGVExFZEJRWE5DTEVsQlFVa3NRMEZCUXl4VlFVRlhMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlJTeERRVUZETzFsQlF6RkZMRk5CUVZNc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRaUVVOb1JDeFRRVUZUTEVOQlFVTXNTVUZCU1N4SFFVRkhMRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMWxCUXpGRUxFMUJRVTBzUjBGQlJ5eEhRVUZuUWl4SlFVRkpMRU5CUVVNc1ZVRkJWeXhEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVVXNRMEZCUXp0WlFVTm9SU3hIUVVGSExFTkJRVU1zUlVGQlJTeEhRVUZITEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1VVRkRlRVFzUTBGQlF5eERRVUZCTzFGQlJVOHNXVUZCVHl4SFFVRkhMRWRCUVZNc1JVRkJSVHRaUVVNelFpeE5RVUZOTEZOQlFWTXNSMEZCYzBJc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTnFSU3hUUVVGVExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRGFFUXNVMEZCVXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzFsQlF5OUVMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEdWQlFXVXNRMEZCUXl4WFFVRlhMRU5CUVVNN1dVRkRjRVFzVFVGQlRTeEhRVUZITEVkQlFXZENMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEZGtRc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dFpRVU5xUkN4SFFVRkhMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMWxCUTJ4RExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkZka0lzVFVGQlRTeFBRVUZQTEVkQlFXZENMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZGTEVOQlFVTTdXVUZEYUVVc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTjBRaXhEUVVGRExFTkJRVUU3VVVFelEwTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRmJFSXNUVUZCVFN4UlFVRlJMRWRCUVhkQ0xGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRla1VzVVVGQlVTeERRVUZETEZOQlFWTXNSMEZCUnl4bFFVRmxMRU5CUVVNc1VVRkJVU3hEUVVGRE8xRkJSVGxETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTndReXhKUVVGSkxFTkJRVU1zVlVGQlZ5eERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJwRkxFTkJRVU03U1VGa1JDeEpRVUZKTEVsQlFVazdVVUZEVGl4UFFVRlBMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRGNFSXNRMEZCUXp0SlFXTkVMR2xDUVVGcFFqdFJRVU5tTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1NVRkJTU3hGUVVGRk8xbEJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUTBGQlJTeERRVUZETzFGQlF6bEVMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRPMUZCUXpGQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0UlFVTm1MRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU5xUWl4RFFVRkRPenRCUVRGRFNDeHJRMEYzUlVNN1FVRjJSV2xDTEcxQ1FVRkhMRWRCUVZjc1YwRkJWeXhEUVVGRE8wRkJSV3hDTERKQ1FVRlhMRWRCUVZjc1UwRkJVeXhEUVVGRE8wRkJSV2hETEhkQ1FVRlJMRWRCUVZjN096dHBRa0ZITlVJc1pVRkJaU3hEUVVGRExGZEJRVmM3T3pzN2FVSkJTVE5DTEdWQlFXVXNRMEZCUXl4WFFVRlhPenM3TzBkQlNYcERMRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBMb2NhbExpbmtFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3RydWN0b3IobGluayA9IFwiXCIsIHRleHQgPSBcIlwiKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9saW5rID0gbGluaztcclxuICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dDtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcclxuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBMb2NhbExpbmtFbGVtZW50LnRlbXBsYXRlO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XHJcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgIH1cclxuICAgIGdldCBsaW5rKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5rO1xyXG4gICAgfVxyXG4gICAgZ2V0IHRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgICB9XHJcbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGluayA9PSBcIlwiIHx8IHRoaXMuX3RleHQgPT0gXCJcIikge1xyXG4gICAgICAgICAgICB0aGlzLl9saW5rID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJsaW5rXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0ZXh0XCIpO1xyXG4gICAgICAgICAgICBjb25zdCBpbm5lckFuY2hvciA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiYVwiKTtcclxuICAgICAgICAgICAgaW5uZXJBbmNob3IuaHJlZiA9IHRoaXMuX2xpbms7XHJcbiAgICAgICAgICAgIGlubmVyQW5jaG9yLnRleHQgPSB0aGlzLl90ZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBMb2NhbExpbmtFbGVtZW50O1xyXG5Mb2NhbExpbmtFbGVtZW50LnRhZyA9IFwibG9jYWwtbGlua1wiO1xyXG5Mb2NhbExpbmtFbGVtZW50LnRlbXBsYXRlID0gYFxuICAgIDxzdHlsZT5cbiAgICAgIGEge1xuICAgICAgICBjb2xvcjogI0U2N0Q0MDtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG4gICAgPGE+PC9hPlxuICBgO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liRzlqWVd4ZmJHbHVheTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTlqYjIxd2IyNWxiblJ6TDJ4dlkyRnNYMnhwYm1zdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4TlFVRnhRaXhuUWtGQmFVSXNVMEZCVVN4WFFVRlhPMGxCZDBKMlJDeFpRVUZaTEU5QlFXVXNSVUZCUlN4RlFVRkZMRTlCUVdVc1JVRkJSVHRSUVVNNVF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTlNMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEyeENMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETzFGQlJXeENMRTFCUVUwc1VVRkJVU3hIUVVGM1FpeFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRM3BGTEZGQlFWRXNRMEZCUXl4VFFVRlRMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUlM5RExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU53UXl4SlFVRkpMRU5CUVVNc1ZVRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEycEZMRU5CUVVNN1NVRnNRa1FzU1VGQlNTeEpRVUZKTzFGQlEwNHNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRM0JDTEVOQlFVTTdTVUZGUkN4SlFVRkpMRWxCUVVrN1VVRkRUaXhQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZEY0VJc1EwRkJRenRKUVdORUxHbENRVUZwUWp0UlFVTm1MRWxCUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeEZRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRGVFTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUlN4RFFVRkRPMWxCUTNoRExFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVVVzUTBGQlF6dFpRVVY0UXl4TlFVRk5MRmRCUVZjc1IwRkJjMElzU1VGQlNTeERRVUZETEZWQlFWY3NRMEZCUXl4aFFVRmhMRU5CUTI1RkxFZEJRVWNzUTBGRFNDeERRVUZETzFsQlJVZ3NWMEZCVnl4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFsQlF6bENMRmRCUVZjc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0VFFVTXZRanRKUVVOSUxFTkJRVU03TzBGQmFFUklMRzFEUVdsRVF6dEJRV2hFYVVJc2IwSkJRVWNzUjBGQlZ5eFpRVUZaTEVOQlFVTTdRVUZGYmtJc2VVSkJRVkVzUjBGQlZ6czdPenM3T3pzN1IwRlJNVU1zUTBGQlF5SjkiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhcnRpY2xlX2Zvb3Rlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYXJ0aWNsZV9mb290ZXJcIikpO1xyXG5jb25zdCBmYW5hcm9fbmF2XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9mYW5hcm9fbmF2XCIpKTtcclxuY29uc3QgZm9vdG5vdGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL2Zvb3Rub3RlXCIpKTtcclxuY29uc3QgbG9jYWxfbGlua18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvbG9jYWxfbGlua1wiKSk7XHJcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShsb2NhbF9saW5rXzEuZGVmYXVsdC50YWcsIGxvY2FsX2xpbmtfMS5kZWZhdWx0KTtcclxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKGZvb3Rub3RlXzEuZGVmYXVsdC50YWcsIGZvb3Rub3RlXzEuZGVmYXVsdCk7XHJcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShhcnRpY2xlX2Zvb3Rlcl8xLmRlZmF1bHQudGFnLCBhcnRpY2xlX2Zvb3Rlcl8xLmRlZmF1bHQpO1xyXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoZmFuYXJvX25hdl8xLmRlZmF1bHQudGFnLCBmYW5hcm9fbmF2XzEuZGVmYXVsdCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlFTeHBSa0ZCSzBRN1FVRkRMMFFzZVVWQlFYVkVPMEZCUTNaRUxIRkZRVUZ2UkR0QlFVTndSQ3g1UlVGQmRVUTdRVUZGZGtRc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF5eHZRa0ZCWjBJc1EwRkJReXhIUVVGSExFVkJRVVVzYjBKQlFXZENMRU5CUVVNc1EwRkJRenRCUVVNNVJDeGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMR3RDUVVGbExFTkJRVU1zUjBGQlJ5eEZRVUZGTEd0Q1FVRmxMRU5CUVVNc1EwRkJRenRCUVVNMVJDeGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMSGRDUVVGdlFpeERRVUZETEVkQlFVY3NSVUZCUlN4M1FrRkJiMElzUTBGQlF5eERRVUZETzBGQlEzUkZMR05CUVdNc1EwRkJReXhOUVVGTkxFTkJRVU1zYjBKQlFXZENMRU5CUVVNc1IwRkJSeXhGUVVGRkxHOUNRVUZuUWl4RFFVRkRMRU5CUVVNaWZRPT0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXyg2MDcpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==