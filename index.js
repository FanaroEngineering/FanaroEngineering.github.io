(()=>{"use strict";var e={692:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super();const e=document.createElement("template");e.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}connectedCallback(){const e=document.querySelectorAll("sub"),t=this.shadowRoot.querySelector("footer"),n=e.length;for(let o=0;o<n;o++)t.appendChild(e[o]),t.append(document.createElement("br"))}}t.default=n,n.tag="article-footer",n.template="\n    <style>\n      hr {\n        margin-left: 0px;\n        border: none;\n        max-width: 150px;\n        width: 35vw;\n        height: 0.75px;\n        color: var(--text-color);\n        background-color: var(--text-color);\n      }\n      a {\n        color: #95c379;\n        text-decoration: none;\n      }\n    </style>\n    \n    <br />\n    <br />\n    <br />\n    <hr />\n    <footer></footer>\n  "},109:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(587),a=o(n(576));class r extends HTMLElement{constructor(){super(),this.article={index:0,title:"",link:"",date:0,language:i.Language.english,mainTopic:i.Topic.go,otherTopics:[i.Topic.go]},this.tr=document.createElement("tr"),this.rowIndex=()=>{const e=document.createElement("td");e.innerHTML=this.article.index.toString(),this.tr.append(e)},this.rowArticle=()=>{const e=document.createElement("td");e.append(new a.default(this.article.link,this.article.title)),this.tr.append(e)},this.rowDate=()=>{const e=document.createElement("td"),t=new Date(this.article.date);e.append(`${t.toLocaleDateString("default",{month:"short"})} ${t.getDate()}, ${t.getFullYear()}`),this.tr.append(e)},this.rowLanguage=()=>{const e=document.createElement("td");e.append(this.article.language.toString()),this.tr.append(e)},this.rowMainTopic=()=>{const e=document.createElement("td");e.append(this.article.mainTopic.toString()),this.tr.append(e)},this.rowOtherTopics=()=>{const e=document.createElement("td"),t=0==this.article.otherTopics.length?String.fromCharCode(8212):this.article.otherTopics.join(", ");e.append(t),this.tr.append(e)};const e=document.createElement("template");e.innerHTML=r.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}connectedCallback(){const e=this.shadowRoot.querySelector("tbody");i.articlesMetadata.forEach((t=>{this.article=t,this.tr=document.createElement("tr"),this.rowIndex(),this.rowArticle(),this.rowDate(),this.rowLanguage(),this.rowMainTopic(),this.rowOtherTopics(),e.append(this.tr)}))}}t.default=r,r.tag="articles-table",r.template='\n    <link rel="stylesheet" href="index.css" />\n\n    <table>\n      <thead>\n        <th>#</th>\n        <th>Article</th>\n        <th>Date</th>\n        <th>Language</th>\n        <th>Main Topic</th>\n        <th>Other Topics</th>\n      </thead>\n      <tbody>\n      </tbody>\n    </table>\n  '},384:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super();const e=document.createElement("template");e.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}}t.default=n,n.tag="fanaro-nav",n.template='\n    <style>\n      a {\n        display: inline-flex;\n        align-items: center;\n        font-size: 1.5rem;\n        color: var(--text-color);\n        text-decoration: none;\n      }\n      svg {\n        padding-right: 10px;\n      }\n    </style>\n    \n    <nav>\n      <a href="/">\n        <svg width="50" height="50">\n          <image width="50" height="50" href="../../assets/favicon.svg" />\n        </svg>\n        <h1>fanaro.io</h1>\n      </a>\n    </nav>\n  '},506:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e=""){super(),this._text="",this.nextIndex=1,this.calculateNextIndex=()=>{const e=document.querySelector("article").querySelectorAll("foot-note").length;this.nextIndex=e},this.editSup=()=>{const e=this.shadowRoot.querySelector("a");e.innerHTML=this.nextIndex.toString(),e.href="#footnote-"+this.nextIndex.toString(),this.shadowRoot.querySelector("sup").id="footnote-base-"+this.nextIndex.toString()},this.editSub=()=>{const e=document.createElement("a");e.innerHTML=this.nextIndex.toString(),e.href="#footnote-base-"+this.nextIndex.toString(),e.style.color=n.anchorColor;const t=document.createElement("sub");t.id="footnote-"+this.nextIndex.toString(),t.innerHTML=": "+this._text,t.prepend(e),document.querySelector("article").append(t)},this._text=e;const t=document.createElement("template");t.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0))}get text(){return this._text}connectedCallback(){""==this._text&&(this._text=this.getAttribute("text")),this.calculateNextIndex(),this.editSup(),this.editSub()}}t.default=n,n.tag="foot-note",n.anchorColor="#D9C07B",n.template=`\n    <style>\n      a {\n        color: ${n.anchorColor};\n        text-decoration: none;\n      }\n      sup {\n        color: ${n.anchorColor};\n      }\n    </style>\n    \n    <sup><a></a></sup>\n  `},576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e="",t=""){super(),this._link=e,this._text=t;const o=document.createElement("template");o.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(o.content.cloneNode(!0))}get link(){return this._link}get text(){return this._text}connectedCallback(){""!=this._link&&""!=this._text||(this._link=this.getAttribute("link"),this._text=this.getAttribute("text"));const e=this.shadowRoot.querySelector("a");e.href=this._link,e.text=this._text}}t.default=n,n.tag="local-link",n.template="\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    \n    <a></a>\n  "},729:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=o(n(109)),a=o(n(692)),r=o(n(384)),s=o(n(506)),l=o(n(576));t.default=class{constructor(){this.article=null,this.define=()=>{customElements.define(l.default.tag,l.default),customElements.define(s.default.tag,s.default),customElements.define(a.default.tag,a.default),customElements.define(r.default.tag,r.default),customElements.define(i.default.tag,i.default)},this.prependAppend=()=>window.addEventListener("DOMContentLoaded",(e=>{this.prependNav(),this.appendFooter()})),this.prependNav=()=>document.body.prepend(document.createElement("fanaro-nav")),this.appendFooter=()=>{this.article=document.querySelector("article"),this.articleContainsFootnotes&&this.article.append(document.createElement("article-footer"))},this.define(),this.prependAppend()}get articleContainsFootnotes(){return null!=this.article&&this.article.querySelectorAll("foot-note").length>0}}},587:(e,t)=>{var n,o;Object.defineProperty(t,"__esModule",{value:!0}),t.articlesMetadata=t.Topic=t.Language=void 0,function(e){e.english="English",e.portuguese="Português",e.french="Français"}(n=t.Language||(t.Language={})),function(e){e.go="Go",e.tsumego="Tsumego",e.joseki="Joseki",e.review="Review",e.productivity="Productivity",e.psychology="Psychology",e.math="Math",e.browserExtension="Browser Extension",e.programming="Programming",e.design="Design",e.language="Language",e.books="Books",e.myYouTubeChannel="My YouTube Channel"}(o=t.Topic||(t.Topic={})),t.articlesMetadata=[{index:107,title:"Revisão com Amir Fragman",link:"/articles/revisao_amir/revisao_amir.html",date:Date.UTC(2020,11,5),language:n.portuguese,mainTopic:o.go,otherTopics:[o.review]},{index:106,title:"OGS Kbd Nav",link:"/articles/ogs_kbd_nav/ogs_kbd_nav.html",date:Date.UTC(2020,10,28),language:n.english,mainTopic:o.productivity,otherTopics:[o.go,o.browserExtension]},{index:105,title:"Tips and Advice on Go Etiquette",link:"/articles/go_etiquette/go_etiquette.html",date:Date.UTC(2020,10,22),language:n.english,mainTopic:o.go,otherTopics:[o.psychology]},{index:104,title:"YouTube Kbd Nav",link:"/articles/youtube_kbd_nav/youtube_kbd_nav.html",date:Date.UTC(2020,8,29),language:n.english,mainTopic:o.productivity,otherTopics:[o.browserExtension]},{index:103,title:"Recursion: Fibonacci in Go",link:"/articles/recursion_fibonacci_in_go/recursion_fibonacci_in_go.html",date:Date.UTC(2020,7,17),language:n.english,mainTopic:o.go,otherTopics:[o.tsumego,o.math]},{index:102,title:"Tradução de um Vídeo da BIBA Baduk",link:"/articles/traducao_biba/traducao_biba.html",date:Date.UTC(2020,7,16),language:n.portuguese,mainTopic:o.go,otherTopics:[o.review]},{index:101,title:"Etimologia da Palavra Carro",link:"/articles/etimologia_carro/etimologia_carro.html",date:Date.UTC(2020,7,11),language:n.portuguese,mainTopic:o.language,otherTopics:[]},{index:100,title:"Os Grandes Debates de Joseki: Aula com Thiago Sinji Ramos",link:"/articles/joseki_debates_sinji/joseki_debates_sinji.html",date:Date.UTC(2020,7,7),language:n.portuguese,mainTopic:o.go,otherTopics:[o.books,o.joseki,o.myYouTubeChannel]},{index:99,title:"Quote #3 - Martin Fowler on Good Code",link:"/articles/quote_3_fowler/quote_3_fowler.html",date:Date.UTC(2020,5,28),language:n.english,mainTopic:o.programming,otherTopics:[o.productivity]},{index:98,title:"DeepL: Traduza Meus Artigos",link:"/articles/deepl/deepl.html",date:Date.UTC(2020,4,20),language:n.portuguese,mainTopic:o.language,otherTopics:[]},{index:97,title:'"Less Code" Print Design',link:"/articles/less_code/less_code.html",date:Date.UTC(2020,3,19),language:n.english,mainTopic:o.programming,otherTopics:[o.design]}]},607:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),new(o(n(729)).default)}},t={};!function n(o){if(t[o])return t[o].exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,