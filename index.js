(()=>{"use strict";var e={149:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalEvents=void 0;const a=r(n(344));t.GlobalEvents=class{constructor(){this.globalState=new a.default,this.ev=new Event("none"),this.onclick=e=>{this.ev=e,this.ifClickOnLink()},this.ifClickOnLink=()=>{if(this.anchorIsLocalLink){this.ev.preventDefault();const e=this.ev.target.getAttribute("localLink");this.globalState=new a.default(a.PageType.article),console.log(e),console.log(this.globalState)}},document.onclick=this.onclick}get anchorIsLocalLink(){return this.ev.target instanceof HTMLAnchorElement&&this.ev.target.hasAttribute("localLink")}}},344:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.PageType=void 0,function(e){e[e.home=0]="home",e[e.article=1]="article"}(n=t.PageType||(t.PageType={})),t.default=class{constructor(e=n.home){this.pageType=e,this.toString=()=>`Global State: {pageType: ${this.pageTypeAsString}}`}get pageTypeAsString(){return Object.values(n)[this.pageType]}}},607:(e,t,n)=>{new(n(149).GlobalEvents)}},t={};!function n(i){if(t[i])return t[i].exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,