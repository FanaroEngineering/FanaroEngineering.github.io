(()=>{"use strict";var t={149:function(t,e,n){var o=this&&this.__createBinding||(Object.create?function(t,e,n,o){void 0===o&&(o=n),Object.defineProperty(t,o,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&o(e,t,n);return i(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GlobalEvents=void 0;const r=a(n(344)),s=l(n(576));e.GlobalEvents=class{constructor(){this._globalState=new r.default,this.onpopstate=t=>{t.target instanceof s.default&&(this._globalState=new r.default(r.PageType.article)),console.log(this._globalState.toString())},window.onpopstate=this.onpopstate}get globalState(){return this._globalState}}},344:(t,e)=>{var n;Object.defineProperty(e,"__esModule",{value:!0}),e.PageType=void 0,function(t){t[t.home=0]="home",t[t.article=1]="article"}(n=e.PageType||(e.PageType={})),e.default=class{constructor(t=n.home){this.pageType=t,this.toString=()=>`Global State: {pageType: ${this.pageTypeAsString}}`}get pageTypeAsString(){return Object.values(n)[this.pageType]}}},576:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super(),this.link="",this.text="",this.fetchAppendArticle=()=>{fetch(this.link).then((t=>t.text())).then((t=>{const e=(new DOMParser).parseFromString(t,"text/html").querySelector("article");document.body.append(e)}))},this.onclick=t=>{t.preventDefault(),this.fetchAppendArticle(),history.pushState({page:this.link,url:this.link},this.text,this.link),this.remove()};const t=document.createElement("template");t.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0))}connectedCallback(){this.link=this.getAttribute("link"),this.text=this.getAttribute("text");const t=this.shadowRoot.querySelector("a");t.href=this.link,t.innerText=this.text}}e.default=n,n.tag="local-link",n.template='\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    <a href=""></a>\n  '},607:function(t,e,n){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(149),a=o(n(576));customElements.define(a.default.tag,a.default),new i.GlobalEvents}},e={};!function n(o){if(e[o])return e[o].exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvY29tcG9uZW50cy9nbG9iYWxfZXZlbnRzLnRzIiwid2VicGFjazovL2ZhbmFyby5pby8uL3NyYy9jb21wb25lbnRzL2dsb2JhbF9zdGF0ZS50cyIsIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvY29tcG9uZW50cy9sb2NhbF9saW5rLnRzIiwid2VicGFjazovL2ZhbmFyby5pby8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9mYW5hcm8uaW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZmFuYXJvLmlvL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJ0aGlzIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJ2IiwidmFsdWUiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2VzTW9kdWxlIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19pbXBvcnREZWZhdWx0IiwiZXhwb3J0cyIsIkdsb2JhbEV2ZW50cyIsImdsb2JhbF9zdGF0ZV8xIiwibG9jYWxfbGlua18xIiwiX2dsb2JhbFN0YXRlIiwiZGVmYXVsdCIsIm9ucG9wc3RhdGUiLCJldiIsInRhcmdldCIsIlBhZ2VUeXBlIiwiYXJ0aWNsZSIsImNvbnNvbGUiLCJsb2ciLCJ0b1N0cmluZyIsIndpbmRvdyIsInBhZ2VUeXBlIiwiaG9tZSIsInBhZ2VUeXBlQXNTdHJpbmciLCJ2YWx1ZXMiLCJMb2NhbExpbmtFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJzdXBlciIsImxpbmsiLCJ0ZXh0IiwiZmV0Y2hBcHBlbmRBcnRpY2xlIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJodG1sQXNTdHJpbmciLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJxdWVyeVNlbGVjdG9yIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kIiwib25jbGljayIsInByZXZlbnREZWZhdWx0IiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInBhZ2UiLCJ1cmwiLCJyZW1vdmUiLCJ0ZW1wbGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwic2hhZG93Um9vdCIsImFwcGVuZENoaWxkIiwiY29udGVudCIsImNsb25lTm9kZSIsImdldEF0dHJpYnV0ZSIsImlubmVyQW5jaG9yIiwiaHJlZiIsImlubmVyVGV4dCIsInRhZyIsImdsb2JhbF9ldmVudHNfMSIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJtYXBwaW5ncyI6IjhDQUNBLElBQUlBLEVBQW1CQyxNQUFRQSxLQUFLRCxrQkFBcUJFLE9BQU9DLE9BQVMsU0FBVUMsRUFBR0MsRUFBR0MsRUFBR0MsUUFDN0VDLElBQVBELElBQWtCQSxFQUFLRCxHQUMzQkosT0FBT08sZUFBZUwsRUFBR0csRUFBSSxDQUFFRyxZQUFZLEVBQU1DLElBQUssV0FBYSxPQUFPTixFQUFFQyxPQUMzRSxTQUFVRixFQUFHQyxFQUFHQyxFQUFHQyxRQUNUQyxJQUFQRCxJQUFrQkEsRUFBS0QsR0FDM0JGLEVBQUVHLEdBQU1GLEVBQUVDLEtBRVZNLEVBQXNCWCxNQUFRQSxLQUFLVyxxQkFBd0JWLE9BQU9DLE9BQVMsU0FBVUMsRUFBR1MsR0FDeEZYLE9BQU9PLGVBQWVMLEVBQUcsVUFBVyxDQUFFTSxZQUFZLEVBQU1JLE1BQU9ELEtBQzlELFNBQVNULEVBQUdTLEdBQ2JULEVBQVcsUUFBSVMsSUFFZkUsRUFBZ0JkLE1BQVFBLEtBQUtjLGNBQWlCLFNBQVVDLEdBQ3hELEdBQUlBLEdBQU9BLEVBQUlDLFdBQVksT0FBT0Qs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TSxDQUFFLFFBQVdBLElBRXhEZCxPQUFPTyxlQUFlYyxFQUFTLGFBQWMsQ0FBRVQsT0FBTyxJQUN0RCxNQUFNaUUsRUFBa0IsRUFBUSxLQUMxQnJELEVBQWVKLEVBQWdCLEVBQVEsTUFDN0MwRCxlQUFlQyxPQUFPdkQsRUFBYUUsUUFBUWtELElBQUtwRCxFQUFhRSxTQUM3RCxJQUFJbUQsRUFBZ0J2RCxlQ1BoQjBELEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVU3RCxRQUczQyxJQUFJOEQsRUFBU0gsRUFBeUJFLEdBQVksQ0FHakQ3RCxRQUFTLElBT1YsT0FIQStELEVBQW9CRixHQUFVL0QsS0FBS2dFLEVBQU85RCxRQUFTOEQsRUFBUUEsRUFBTzlELFFBQVM0RCxHQUdwRUUsRUFBTzlELFFDakJmNEQsQ0FBb0IsTSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn0pO1xyXG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkdsb2JhbEV2ZW50cyA9IHZvaWQgMDtcclxuY29uc3QgZ2xvYmFsX3N0YXRlXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZ2xvYmFsX3N0YXRlXCIpKTtcclxuY29uc3QgbG9jYWxfbGlua18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvY2FsX2xpbmtcIikpO1xyXG5jbGFzcyBHbG9iYWxFdmVudHMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fZ2xvYmFsU3RhdGUgPSBuZXcgZ2xvYmFsX3N0YXRlXzEuZGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMub25wb3BzdGF0ZSA9IChldikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXYudGFyZ2V0IGluc3RhbmNlb2YgbG9jYWxfbGlua18xLmRlZmF1bHQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9nbG9iYWxTdGF0ZSA9IG5ldyBnbG9iYWxfc3RhdGVfMS5kZWZhdWx0KGdsb2JhbF9zdGF0ZV8xLlBhZ2VUeXBlLmFydGljbGUpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9nbG9iYWxTdGF0ZS50b1N0cmluZygpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHdpbmRvdy5vbnBvcHN0YXRlID0gdGhpcy5vbnBvcHN0YXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGdsb2JhbFN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nbG9iYWxTdGF0ZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkdsb2JhbEV2ZW50cyA9IEdsb2JhbEV2ZW50cztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWjJ4dlltRnNYMlYyWlc1MGN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMmRzYjJKaGJGOWxkbVZ1ZEhNdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJMQ3RFUVVGMVJEdEJRVU4yUkN3NFJFRkJORU03UVVGRk5VTXNUVUZCWVN4WlFVRlpPMGxCU1haQ08xRkJTRkVzYVVKQlFWa3NSMEZCWjBJc1NVRkJTU3h6UWtGQlZ5eEZRVUZGTEVOQlFVTTdVVUZYT1VNc1pVRkJWU3hIUVVGSExFTkJRVU1zUlVGQmFVSXNSVUZCVVN4RlFVRkZPMWxCUXk5RExFbEJRVWtzUlVGQlJTeERRVUZETEUxQlFVMHNXVUZCV1N4dlFrRkJaMEk3WjBKQlEzWkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeHpRa0ZCVnl4RFFVRkRMSFZDUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdXVUZGZUVRc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE5VTXNRMEZCUXl4RFFVRkRPMUZCV2tFc1RVRkJUU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRPMGxCUTNSRExFTkJRVU03U1VGRlJDeEpRVUZKTEZkQlFWYzdVVUZEWWl4UFFVRlBMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU03U1VGRE0wSXNRMEZCUXp0RFFWRkdPMEZCYkVKRUxHOURRV3RDUXlKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuUGFnZVR5cGUgPSB2b2lkIDA7XHJcbnZhciBQYWdlVHlwZTtcclxuKGZ1bmN0aW9uIChQYWdlVHlwZSkge1xyXG4gICAgUGFnZVR5cGVbUGFnZVR5cGVbXCJob21lXCJdID0gMF0gPSBcImhvbWVcIjtcclxuICAgIFBhZ2VUeXBlW1BhZ2VUeXBlW1wiYXJ0aWNsZVwiXSA9IDFdID0gXCJhcnRpY2xlXCI7XHJcbn0pKFBhZ2VUeXBlID0gZXhwb3J0cy5QYWdlVHlwZSB8fCAoZXhwb3J0cy5QYWdlVHlwZSA9IHt9KSk7XHJcbmNsYXNzIEdsb2JhbFN0YXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhZ2VUeXBlID0gUGFnZVR5cGUuaG9tZSkge1xyXG4gICAgICAgIHRoaXMucGFnZVR5cGUgPSBwYWdlVHlwZTtcclxuICAgICAgICB0aGlzLnRvU3RyaW5nID0gKCkgPT4gYEdsb2JhbCBTdGF0ZToge3BhZ2VUeXBlOiAke3RoaXMucGFnZVR5cGVBc1N0cmluZ319YDtcclxuICAgIH1cclxuICAgIGdldCBwYWdlVHlwZUFzU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKFBhZ2VUeXBlKVt0aGlzLnBhZ2VUeXBlXTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBHbG9iYWxTdGF0ZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWjJ4dlltRnNYM04wWVhSbExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZaMnh2WW1Gc1gzTjBZWFJsTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVUZCTEVsQlFWa3NVVUZIV0R0QlFVaEVMRmRCUVZrc1VVRkJVVHRKUVVOc1FpeDFRMEZCU1N4RFFVRkJPMGxCUTBvc05rTkJRVThzUTBGQlFUdEJRVU5VTEVOQlFVTXNSVUZJVnl4UlFVRlJMRWRCUVZJc1owSkJRVkVzUzBGQlVpeG5Ra0ZCVVN4UlFVZHVRanRCUVUxRUxFMUJRWEZDTEZkQlFWYzdTVUZET1VJc1dVRkJjVUlzVjBGQmNVSXNVVUZCVVN4RFFVRkRMRWxCUVVrN1VVRkJiRU1zWVVGQlVTeEhRVUZTTEZGQlFWRXNRMEZCTUVJN1VVRkZka1FzWVVGQlVTeEhRVUZITEVkQlFWY3NSVUZCUlN4RFFVRkRMRFJDUVVFMFFpeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzUTBGQlF6dEpRVVp3UWl4RFFVRkRPMGxCU1RORUxFbEJRVmtzWjBKQlFXZENPMUZCUXpGQ0xFOUJRVThzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZYTEVOQlFVTTdTVUZETVVRc1EwRkJRenREUVVOR08wRkJVa1FzT0VKQlVVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgTG9jYWxMaW5rRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5saW5rID0gXCJcIjtcclxuICAgICAgICB0aGlzLnRleHQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hBcHBlbmRBcnRpY2xlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBmZXRjaCh0aGlzLmxpbmspXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLnRleHQoKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChodG1sQXNTdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFydGljbGVEb2N1bWVudCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbEFzU3RyaW5nLCBcInRleHQvaHRtbFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFydGljbGUgPSBhcnRpY2xlRG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFydGljbGVcIik7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChhcnRpY2xlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9uY2xpY2sgPSAoZXYpID0+IHtcclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5mZXRjaEFwcGVuZEFydGljbGUoKTtcclxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoeyBwYWdlOiB0aGlzLmxpbmssIHVybDogdGhpcy5saW5rIH0sIHRoaXMudGV4dCwgdGhpcy5saW5rKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xyXG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IExvY2FsTGlua0VsZW1lbnQudGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcclxuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgfVxyXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgdGhpcy5saW5rID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJsaW5rXCIpO1xyXG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidGV4dFwiKTtcclxuICAgICAgICBjb25zdCBpbm5lckFuY2hvciA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiYVwiKTtcclxuICAgICAgICBpbm5lckFuY2hvci5ocmVmID0gdGhpcy5saW5rO1xyXG4gICAgICAgIGlubmVyQW5jaG9yLmlubmVyVGV4dCA9IHRoaXMudGV4dDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBMb2NhbExpbmtFbGVtZW50O1xyXG5Mb2NhbExpbmtFbGVtZW50LnRhZyA9IFwibG9jYWwtbGlua1wiO1xyXG5Mb2NhbExpbmtFbGVtZW50LnRlbXBsYXRlID0gYFxuICAgIDxzdHlsZT5cbiAgICAgIGEge1xuICAgICAgICBjb2xvcjogI0U2N0Q0MDtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG4gICAgPGEgaHJlZj1cIlwiPjwvYT5cbiAgYDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYkc5allXeGZiR2x1YXk1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5amIyMXdiMjVsYm5SekwyeHZZMkZzWDJ4cGJtc3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeE5RVUZ4UWl4blFrRkJhVUlzVTBGQlVTeFhRVUZYTzBsQlowSjJSRHRSUVVORkxFdEJRVXNzUlVGQlJTeERRVUZETzFGQlNrWXNVMEZCU1N4SFFVRlhMRVZCUVVVc1EwRkJRenRSUVVOc1FpeFRRVUZKTEVkQlFWY3NSVUZCUlN4RFFVRkRPMUZCY1VKc1FpeDFRa0ZCYTBJc1IwRkJSeXhIUVVGVExFVkJRVVU3V1VGRGRFTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03YVVKQlEySXNTVUZCU1N4RFFVRkRMRU5CUVVNc1VVRkJhMElzUlVGQlJTeEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8ybENRVU0zUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhaUVVGdlFpeEZRVUZGTEVWQlFVVTdaMEpCUXpkQ0xFMUJRVTBzVFVGQlRTeEhRVUZqTEVsQlFVa3NVMEZCVXl4RlFVRkZMRU5CUVVNN1owSkJSVEZETEUxQlFVMHNaVUZCWlN4SFFVRmhMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRM1JFTEZsQlFWa3NSVUZEV2l4WFFVRlhMRU5CUTFvc1EwRkJRenRuUWtGRlJpeE5RVUZOTEU5QlFVOHNSMEZCWjBJc1pVRkJaU3hEUVVGRExHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVVXNRMEZCUXp0blFrRkZka1VzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRGFFTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU03VVVGRlJpeFpRVUZQTEVkQlFVY3NRMEZCUXl4RlFVRmpMRVZCUVZFc1JVRkJSVHRaUVVOcVF5eEZRVUZGTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1dVRkRjRUlzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU03V1VGRE1VSXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkRaaXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlEyNURMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRMVFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZEVml4RFFVRkRPMWxCUTBZc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzFGQlEyaENMRU5CUVVNc1EwRkJRenRSUVRGRFFTeE5RVUZOTEZGQlFWRXNSMEZCZDBJc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTjZSU3hSUVVGUkxFTkJRVU1zVTBGQlV5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUTBGQlF6dFJRVVV2UXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRjRU1zU1VGQlNTeERRVUZETEZWQlFWY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOcVJTeERRVUZETzBsQlJVUXNhVUpCUVdsQ08xRkJRMllzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUTBGQlJTeERRVUZETzFGQlEzWkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVVc1EwRkJRenRSUVVWMlF5eE5RVUZOTEZkQlFWY3NSMEZCYzBJc1NVRkJTU3hEUVVGRExGVkJRVmNzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkZMRU5CUVVNN1VVRkROVVVzVjBGQlZ5eERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJRemRDTEZkQlFWY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dEpRVU53UXl4RFFVRkRPenRCUVdwRFNDeHRRMEU0UkVNN1FVRTNSR2xDTEc5Q1FVRkhMRWRCUVZjc1dVRkJXU3hEUVVGRE8wRkJSVzVDTEhsQ1FVRlJMRWRCUVZjN096czdPenM3TzBkQlVURkRMRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBnbG9iYWxfZXZlbnRzXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2dsb2JhbF9ldmVudHNcIik7XHJcbmNvbnN0IGxvY2FsX2xpbmtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL2xvY2FsX2xpbmtcIikpO1xyXG5jdXN0b21FbGVtZW50cy5kZWZpbmUobG9jYWxfbGlua18xLmRlZmF1bHQudGFnLCBsb2NhbF9saW5rXzEuZGVmYXVsdCk7XHJcbm5ldyBnbG9iYWxfZXZlbnRzXzEuR2xvYmFsRXZlbnRzKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlFTdzRSRUZCTUVRN1FVRkRNVVFzZVVWQlFYVkVPMEZCUlhaRUxHTkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNiMEpCUVdkQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEc5Q1FVRm5RaXhEUVVGRExFTkJRVU03UVVGRk9VUXNTVUZCU1N3MFFrRkJXU3hGUVVGRkxFTkJRVU1pZlE9PSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGVcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwic291cmNlUm9vdCI6IiJ9