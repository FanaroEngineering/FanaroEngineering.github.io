(()=>{"use strict";var e={150:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalEvents=t.PageType=void 0,(o=t.PageType||(t.PageType={}))[o.home=0]="home",o[o.article=1]="article",t.default=class{constructor(e){this.pageType=e}},t.GlobalEvents=class{constructor(){this.onclick=e=>{if(e.target instanceof HTMLAnchorElement){e.preventDefault();const t=e.target;if(t.getAttribute("localLink")?.length>0){const e=t.getAttribute("localLink");console.log(e)}else console.log("Not a local link.")}else console.log("Not a link")},document.onclick=this.onclick}}},607:(e,t,o)=>{new(o(150).GlobalEvents)}},t={};!function o(l){if(t[l])return t[l].exports;var n=t[l]={exports:{}};return e[l](n,n.exports,o),n.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvYXJ0aWNsZXMvYXJ0aWNsZV9zdHVmZi50cyIsIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmFuYXJvLmlvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ZhbmFyby5pby93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiUGFnZVR5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdsb2JhbEV2ZW50cyIsImRlZmF1bHQiLCJwYWdlVHlwZSIsInRoaXMiLCJvbmNsaWNrIiwiZXYiLCJ0YXJnZXQiLCJIVE1MQW5jaG9yRWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwiYW5jaG9yIiwiZ2V0QXR0cmlidXRlIiwibGVuZ3RoIiwibG9jYWxMaW5rIiwiY29uc29sZSIsImxvZyIsImRvY3VtZW50IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJtYXBwaW5ncyI6InNDQUlBLElBQVdBLEVBSFhDLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRRSxhQUFlRixFQUFRSCxjQUFXLEdBRS9CQSxFQUdHRyxFQUFRSCxXQUFhRyxFQUFRSCxTQUFXLEtBRnpDQSxFQUFlLEtBQUksR0FBSyxPQUNqQ0EsRUFBU0EsRUFBa0IsUUFBSSxHQUFLLFVBT3hDRyxFQUFRRyxRQUxSLE1BQ0ksWUFBWUMsR0FDUkMsS0FBS0QsU0FBV0EsSUF5QnhCSixFQUFRRSxhQXJCUixNQUNJLGNBQ0lHLEtBQUtDLFFBQVdDLElBQ1osR0FBSUEsRUFBR0Msa0JBQWtCQyxrQkFBbUIsQ0FDeENGLEVBQUdHLGlCQUNILE1BQU1DLEVBQVNKLEVBQUdDLE9BQ2xCLEdBQUlHLEVBQU9DLGFBQWEsY0FBY0MsT0FBUyxFQUFHLENBQzlDLE1BQU1DLEVBQVlILEVBQU9DLGFBQWEsYUFDdENHLFFBQVFDLElBQUlGLFFBR1pDLFFBQVFDLElBQUksMEJBSWhCRCxRQUFRQyxJQUFJLGVBR3BCQyxTQUFTWCxRQUFVRCxLQUFLQyxXLGNDN0JoQyxJQUR3QixFQUFRLEtBQ1pKLGdCQ0ZoQmdCLEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVVwQixRQUczQyxJQUFJcUIsRUFBU0gsRUFBeUJFLEdBQVksQ0FHakRwQixRQUFTLElBT1YsT0FIQXNCLEVBQW9CRixHQUFVQyxFQUFRQSxFQUFPckIsUUFBU21CLEdBRy9DRSxFQUFPckIsUUNsQmZtQixDQUFvQixNIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5HbG9iYWxFdmVudHMgPSBleHBvcnRzLlBhZ2VUeXBlID0gdm9pZCAwO1xyXG52YXIgUGFnZVR5cGU7XHJcbihmdW5jdGlvbiAoUGFnZVR5cGUpIHtcclxuICAgIFBhZ2VUeXBlW1BhZ2VUeXBlW1wiaG9tZVwiXSA9IDBdID0gXCJob21lXCI7XHJcbiAgICBQYWdlVHlwZVtQYWdlVHlwZVtcImFydGljbGVcIl0gPSAxXSA9IFwiYXJ0aWNsZVwiO1xyXG59KShQYWdlVHlwZSA9IGV4cG9ydHMuUGFnZVR5cGUgfHwgKGV4cG9ydHMuUGFnZVR5cGUgPSB7fSkpO1xyXG5jbGFzcyBHbG9iYWxTdGF0ZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYWdlVHlwZSkge1xyXG4gICAgICAgIHRoaXMucGFnZVR5cGUgPSBwYWdlVHlwZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBHbG9iYWxTdGF0ZTtcclxuY2xhc3MgR2xvYmFsRXZlbnRzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMub25jbGljayA9IChldikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXYudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBldi50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yLmdldEF0dHJpYnV0ZShcImxvY2FsTGlua1wiKT8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsTGluayA9IGFuY2hvci5nZXRBdHRyaWJ1dGUoXCJsb2NhbExpbmtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobG9jYWxMaW5rKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm90IGEgbG9jYWwgbGluay5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vdCBhIGxpbmtcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGRvY3VtZW50Lm9uY2xpY2sgPSB0aGlzLm9uY2xpY2s7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5HbG9iYWxFdmVudHMgPSBHbG9iYWxFdmVudHM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlYSjBhV05zWlY5emRIVm1aaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OWhjblJwWTJ4bGN5OWhjblJwWTJ4bFgzTjBkV1ptTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVUZCTEVsQlFWa3NVVUZIV0R0QlFVaEVMRmRCUVZrc1VVRkJVVHRKUVVOc1FpeDFRMEZCU1N4RFFVRkJPMGxCUTBvc05rTkJRVThzUTBGQlFUdEJRVU5VTEVOQlFVTXNSVUZJVnl4UlFVRlJMRWRCUVZJc1owSkJRVkVzUzBGQlVpeG5Ra0ZCVVN4UlFVZHVRanRCUVVWRUxFMUJRWEZDTEZkQlFWYzdTVUZET1VJc1dVRkJjVUlzVVVGQmEwSTdVVUZCYkVJc1lVRkJVU3hIUVVGU0xGRkJRVkVzUTBGQlZUdEpRVUZITEVOQlFVTTdRMEZETlVNN1FVRkdSQ3c0UWtGRlF6dEJRVVZFTEUxQlFXRXNXVUZCV1R0SlFVTjJRanRSUVVsUkxGbEJRVThzUjBGQlJ5eERRVUZETEVWQlFXTXNSVUZCUlN4RlFVRkZPMWxCUTI1RExFbEJRVWtzUlVGQlJTeERRVUZETEUxQlFVMHNXVUZCV1N4cFFrRkJhVUlzUlVGQlJUdG5Ra0ZETVVNc1JVRkJSU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzJkQ1FVTndRaXhOUVVGTkxFMUJRVTBzUjBGQmMwSXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJRenRuUWtGRE5VTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEUxQlFVOHNSMEZCUnl4RFFVRkRMRVZCUVVVN2IwSkJRMnBFTEUxQlFVMHNVMEZCVXl4SFFVRlhMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zVjBGQlZ5eERRVUZGTEVOQlFVTTdiMEpCUXpWRUxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN2FVSkJRM2hDTzNGQ1FVRk5PMjlDUVVOTUxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dHBRa0ZEYkVNN1lVRkRSanRwUWtGQlRUdG5Ra0ZEVEN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzJGQlF6TkNPMUZCUTBnc1EwRkJReXhEUVVGRE8xRkJhRUpCTEZGQlFWRXNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF6dEpRVU5zUXl4RFFVRkRPME5CWjBKR08wRkJia0pFTEc5RFFXMUNReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgYXJ0aWNsZV9zdHVmZl8xID0gcmVxdWlyZShcIi4vYXJ0aWNsZXMvYXJ0aWNsZV9zdHVmZlwiKTtcclxubmV3IGFydGljbGVfc3R1ZmZfMS5HbG9iYWxFdmVudHMoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTdzBSRUZCZDBRN1FVRkZlRVFzU1VGQlNTdzBRa0ZCV1N4RlFVRkZMRU5CUVVNaWZRPT0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4vLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdleHBvcnRzJyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG4iXSwic291cmNlUm9vdCI6IiJ9