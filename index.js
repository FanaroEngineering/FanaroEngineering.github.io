(()=>{"use strict";var t={149:function(t,e,n){var o=this&&this.__createBinding||(Object.create?function(t,e,n,o){void 0===o&&(o=n),Object.defineProperty(t,o,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&o(e,t,n);return a(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GlobalEvents=void 0;const r=i(n(344)),s=l(n(576));e.GlobalEvents=class{constructor(){this._globalState=new r.default,this.onclick=t=>{t.target instanceof s.default&&(this._globalState=new r.default(r.PageType.article))},this.onpopstate=t=>{window.location.pathname.endsWith("/")&&(document.body.removeChild(document.querySelector("article")),this._globalState=new r.default(r.PageType.home))},window.onpopstate=this.onpopstate,window.onclick=this.onclick}get globalState(){return this._globalState}}},344:(t,e)=>{var n;Object.defineProperty(e,"__esModule",{value:!0}),e.PageType=void 0,function(t){t[t.home=0]="home",t[t.article=1]="article"}(n=e.PageType||(e.PageType={})),e.default=class{constructor(t=n.home){this.pageType=t,this.toString=()=>`Global State: {pageType: ${this.pageTypeAsString}}`}get pageTypeAsString(){return Object.values(n)[this.pageType]}}},576:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(t="",e=""){super(),this.link=t,this.text=e;const o=document.createElement("template");o.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(o.content.cloneNode(!0))}connectedCallback(){if(""==this.link||""==this.text){this.link=this.getAttribute("link"),this.text=this.getAttribute("text");const t=this.shadowRoot.querySelector("a");t.href=this.link,t.text=this.text}}}e.default=n,n.tag="local-link",n.template='\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    <a href=""></a>\n  '},607:function(t,e,n){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const a=n(149),i=o(n(576));customElements.define(i.default.tag,i.default),new a.GlobalEvents}},e={};!function n(o){if(e[o])return e[o].exports;var a=e[o]={exports:{}};return t[o].call(a.exports,a,a.exports,n),a.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,