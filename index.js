(()=>{"use strict";var e={692:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super();const e=document.createElement("template");e.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}connectedCallback(){const e=document.querySelectorAll("sub"),t=this.shadowRoot.querySelector("footer"),n=e.length;for(let o=0;o<n;o++)t.appendChild(e[o]),t.append(document.createElement("br"))}}t.default=n,n.tag="article-footer",n.template="\n    <style>\n      hr {\n        margin-left: 0px;\n        border: none;\n        max-width: 150px;\n        width: 35vw;\n        height: 0.75px;\n        color: var(--text-color);\n        background-color: var(--text-color);\n      }\n      a {\n        color: #95c379;\n        text-decoration: none;\n      }\n    </style>\n    <br />\n    <br />\n    <br />\n    <hr />\n    <footer></footer>\n  "},384:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super();const e=document.createElement("template");e.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}}t.default=n,n.tag="fanaro-nav",n.template='\n    <style>\n      a {\n        display: inline-flex;\n        align-items: center;\n        font-size: 1.5rem;\n        color: var(--text-color);\n        text-decoration: none;\n      }\n      svg {\n        padding-right: 10px;\n      }\n    </style>\n    <nav>\n      <a href="/">\n        <svg width="50" height="50">\n          <image width="50" height="50" href="../../assets/favicon.svg" />\n        </svg>\n        <h1>fanaro.io</h1>\n      </a>\n    </nav>\n  '},506:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e=""){super(),this._text="",this.nextIndex=1,this.calculateNextIndex=()=>{const e=document.querySelector("article").querySelectorAll("foot-note").length;this.nextIndex=e},this.editSup=()=>{const e=this.shadowRoot.querySelector("a");e.innerHTML=this.nextIndex.toString(),e.href="#footnote-"+this.nextIndex.toString(),this.shadowRoot.querySelector("sup").id="footnote-base-"+this.nextIndex.toString()},this.editSub=()=>{const e=document.createElement("a");e.innerHTML=this.nextIndex.toString(),e.href="#footnote-base-"+this.nextIndex.toString(),e.style.color=n.anchorColor;const t=document.createElement("sub");t.id="footnote-"+this.nextIndex.toString(),t.innerHTML=": "+this._text,t.prepend(e),document.querySelector("article").append(t)},this._text=e;const t=document.createElement("template");t.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0))}get text(){return this._text}connectedCallback(){""==this._text&&(this._text=this.getAttribute("text")),this.calculateNextIndex(),this.editSup(),this.editSub()}}t.default=n,n.tag="foot-note",n.anchorColor="#D9C07B",n.template=`\n    <style>\n      a {\n        color: ${n.anchorColor};\n        text-decoration: none;\n      }\n      sup {\n        color: ${n.anchorColor};\n      }\n    </style>\n    <sup><a></a></sup>\n  `},576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e="",t=""){super(),this._link=e,this._text=t;const o=document.createElement("template");o.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(o.content.cloneNode(!0))}get link(){return this._link}get text(){return this._text}connectedCallback(){if(""==this._link||""==this._text){this._link=this.getAttribute("link"),this._text=this.getAttribute("text");const e=this.shadowRoot.querySelector("a");e.href=this._link,e.text=this._text}}}t.default=n,n.tag="local-link",n.template="\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    <a></a>\n  "},729:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=o(n(692)),a=o(n(384)),s=o(n(506)),l=o(n(576));t.default=class{constructor(){this.define=()=>{customElements.define(l.default.tag,l.default),customElements.define(s.default.tag,s.default),customElements.define(r.default.tag,r.default),customElements.define(a.default.tag,a.default)},this.prependAppend=()=>window.addEventListener("DOMContentLoaded",(e=>{this.prependNav(),this.appendFooter()})),this.prependNav=()=>document.body.prepend(document.createElement("fanaro-nav")),this.appendFooter=()=>{const e=document.querySelector("article");null!=e&&e.append(document.createElement("article-footer"))},this.define(),this.prependAppend()}}},607:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),new(o(n(729)).default)}},t={};!function n(o){if(t[o])return t[o].exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,n),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,