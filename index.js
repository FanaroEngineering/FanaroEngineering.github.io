(()=>{"use strict";var e={149:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalEvents=void 0;const r=l(n(344));t.GlobalEvents=class{constructor(){this.globalState=new r.default,this.ev=new Event("none"),this.onclick=e=>{this.ev=e,this.ifClickOnLink()},this.ifClickOnLink=()=>{if(this.anchorIsLocalLink){this.ev.preventDefault();const e=this.ev.target.getAttribute("localLink");this.globalState=new r.default(r.PageType.article),console.log(e),console.log(this.globalState)}},document.onclick=this.onclick}get anchorIsLocalLink(){return this.ev.target instanceof HTMLAnchorElement&&this.ev.target.hasAttribute("localLink")}}},344:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.PageType=void 0,function(e){e[e.home=0]="home",e[e.article=1]="article"}(n=t.PageType||(t.PageType={})),t.default=class{constructor(e=n.home){this.pageType=e,this.toString=()=>`Global State: {pageType: ${this.pageTypeAsString}}`}get pageTypeAsString(){return Object.values(n)[this.pageType]}}},576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super(),this.link=null,this.text=null,this.fetchAppendArticle=()=>{null!=this.link&&fetch(this.link).then((e=>e.text())).then((e=>{const t=(new DOMParser).parseFromString(e,"text/html").querySelector("article");document.body.append(t)}))},this.onclick=e=>{e.preventDefault(),this.fetchAppendArticle(),this.remove()};const e=document.createElement("template");e.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}connectedCallback(){this.link=this.getAttribute("link"),this.text=this.getAttribute("text");const e=this.shadowRoot.querySelector("a");e.href=this.link,e.innerText=this.text}}t.default=n,n.tag="local-link",n.template='\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    <a href=""></a>\n  '},607:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(149),l=i(n(576));customElements.define(l.default.tag,l.default),new o.GlobalEvents}},t={};!function n(i){if(t[i])return t[i].exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,