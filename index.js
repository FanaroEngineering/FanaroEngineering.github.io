(()=>{"use strict";var e={150:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.Events=t.PageType=void 0,(o=t.PageType||(t.PageType={}))[o.home=0]="home",o[o.article=1]="article",t.default=class{constructor(e){this.pageType=e}},t.Events=class{constructor(){this.onclick=e=>{if(e.target instanceof HTMLAnchorElement){e.preventDefault();const t=e.target;if(t.getAttribute("localLink")?.length>0){const e=t.getAttribute("localLink");console.log(e)}else console.log("Not a local link.")}else console.log("Not a link")},document.onclick=this.onclick}}},607:(e,t,o)=>{new(o(150).Events)}},t={};!function o(n){if(t[n])return t[n].exports;var l=t[n]={exports:{}};return e[n](l,l.exports,o),l.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvYXJ0aWNsZXMvYXJ0aWNsZV9zdHVmZi50cyIsIndlYnBhY2s6Ly9mYW5hcm8uaW8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmFuYXJvLmlvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ZhbmFyby5pby93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiUGFnZVR5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV2ZW50cyIsImRlZmF1bHQiLCJwYWdlVHlwZSIsInRoaXMiLCJvbmNsaWNrIiwiZXYiLCJ0YXJnZXQiLCJIVE1MQW5jaG9yRWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwiYW5jaG9yIiwiZ2V0QXR0cmlidXRlIiwibGVuZ3RoIiwibG9jYWxMaW5rIiwiY29uc29sZSIsImxvZyIsImRvY3VtZW50IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJtYXBwaW5ncyI6InNDQUlBLElBQVdBLEVBSFhDLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRRSxPQUFTRixFQUFRSCxjQUFXLEdBRXpCQSxFQUdHRyxFQUFRSCxXQUFhRyxFQUFRSCxTQUFXLEtBRnpDQSxFQUFlLEtBQUksR0FBSyxPQUNqQ0EsRUFBU0EsRUFBa0IsUUFBSSxHQUFLLFVBT3hDRyxFQUFRRyxRQUxSLE1BQ0ksWUFBWUMsR0FDUkMsS0FBS0QsU0FBV0EsSUF5QnhCSixFQUFRRSxPQXJCUixNQUNJLGNBQ0lHLEtBQUtDLFFBQVdDLElBQ1osR0FBSUEsRUFBR0Msa0JBQWtCQyxrQkFBbUIsQ0FDeENGLEVBQUdHLGlCQUNILE1BQU1DLEVBQVNKLEVBQUdDLE9BQ2xCLEdBQUlHLEVBQU9DLGFBQWEsY0FBY0MsT0FBUyxFQUFHLENBQzlDLE1BQU1DLEVBQVlILEVBQU9DLGFBQWEsYUFDdENHLFFBQVFDLElBQUlGLFFBR1pDLFFBQVFDLElBQUksMEJBSWhCRCxRQUFRQyxJQUFJLGVBR3BCQyxTQUFTWCxRQUFVRCxLQUFLQyxXLGNDN0JoQyxJQUR3QixFQUFRLEtBQ1pKLFVDRmhCZ0IsRUFBMkIsSUFHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVXBCLFFBRzNDLElBQUlxQixFQUFTSCxFQUF5QkUsR0FBWSxDQUdqRHBCLFFBQVMsSUFPVixPQUhBc0IsRUFBb0JGLEdBQVVDLEVBQVFBLEVBQU9yQixRQUFTbUIsR0FHL0NFLEVBQU9yQixRQ2xCZm1CLENBQW9CLE0iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkV2ZW50cyA9IGV4cG9ydHMuUGFnZVR5cGUgPSB2b2lkIDA7XHJcbnZhciBQYWdlVHlwZTtcclxuKGZ1bmN0aW9uIChQYWdlVHlwZSkge1xyXG4gICAgUGFnZVR5cGVbUGFnZVR5cGVbXCJob21lXCJdID0gMF0gPSBcImhvbWVcIjtcclxuICAgIFBhZ2VUeXBlW1BhZ2VUeXBlW1wiYXJ0aWNsZVwiXSA9IDFdID0gXCJhcnRpY2xlXCI7XHJcbn0pKFBhZ2VUeXBlID0gZXhwb3J0cy5QYWdlVHlwZSB8fCAoZXhwb3J0cy5QYWdlVHlwZSA9IHt9KSk7XHJcbmNsYXNzIFN0YXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhZ2VUeXBlKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlVHlwZSA9IHBhZ2VUeXBlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFN0YXRlO1xyXG5jbGFzcyBFdmVudHMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5vbmNsaWNrID0gKGV2KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldi50YXJnZXQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGV2LnRhcmdldDtcclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3IuZ2V0QXR0cmlidXRlKFwibG9jYWxMaW5rXCIpPy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYWxMaW5rID0gYW5jaG9yLmdldEF0dHJpYnV0ZShcImxvY2FsTGlua1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhbExpbmspO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJOb3QgYSBsb2NhbCBsaW5rLlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm90IGEgbGlua1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZG9jdW1lbnQub25jbGljayA9IHRoaXMub25jbGljaztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkV2ZW50cyA9IEV2ZW50cztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhKMGFXTnNaVjl6ZEhWbVppNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5aGNuUnBZMnhsY3k5aGNuUnBZMnhsWDNOMGRXWm1MblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMRWxCUVZrc1VVRkhXRHRCUVVoRUxGZEJRVmtzVVVGQlVUdEpRVU5zUWl4MVEwRkJTU3hEUVVGQk8wbEJRMG9zTmtOQlFVOHNRMEZCUVR0QlFVTlVMRU5CUVVNc1JVRklWeXhSUVVGUkxFZEJRVklzWjBKQlFWRXNTMEZCVWl4blFrRkJVU3hSUVVkdVFqdEJRVVZFTEUxQlFYRkNMRXRCUVVzN1NVRkRlRUlzV1VGQmNVSXNVVUZCYTBJN1VVRkJiRUlzWVVGQlVTeEhRVUZTTEZGQlFWRXNRMEZCVlR0SlFVRkhMRU5CUVVNN1EwRkROVU03UVVGR1JDeDNRa0ZGUXp0QlFVVkVMRTFCUVdFc1RVRkJUVHRKUVVOcVFqdFJRVWxSTEZsQlFVOHNSMEZCUnl4RFFVRkRMRVZCUVdNc1JVRkJSU3hGUVVGRk8xbEJRMjVETEVsQlFVa3NSVUZCUlN4RFFVRkRMRTFCUVUwc1dVRkJXU3hwUWtGQmFVSXNSVUZCUlR0blFrRkRNVU1zUlVGQlJTeERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMmRDUVVOd1FpeE5RVUZOTEUxQlFVMHNSMEZCYzBJc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF6dG5Ra0ZETlVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZMRTFCUVU4c1IwRkJSeXhEUVVGRExFVkJRVVU3YjBKQlEycEVMRTFCUVUwc1UwRkJVeXhIUVVGWExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNWMEZCVnl4RFFVRkZMRU5CUVVNN2IwSkJRelZFTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03YVVKQlEzaENPM0ZDUVVGTk8yOUNRVU5NTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0cFFrRkRiRU03WVVGRFJqdHBRa0ZCVFR0blFrRkRUQ3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMkZCUXpOQ08xRkJRMGdzUTBGQlF5eERRVUZETzFGQmFFSkJMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXp0SlFVTnNReXhEUVVGRE8wTkJaMEpHTzBGQmJrSkVMSGRDUVcxQ1F5SjkiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhcnRpY2xlX3N0dWZmXzEgPSByZXF1aXJlKFwiLi9hcnRpY2xlcy9hcnRpY2xlX3N0dWZmXCIpO1xyXG5uZXcgYXJ0aWNsZV9zdHVmZl8xLkV2ZW50cygpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN3MFJFRkJhMFE3UVVGRmJFUXNTVUZCU1N4elFrRkJUU3hGUVVGRkxFTkJRVU1pZlE9PSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGVcbl9fd2VicGFja19yZXF1aXJlX18oNjA3KTtcbi8vIFRoaXMgZW50cnkgbW9kdWxlIHVzZWQgJ2V4cG9ydHMnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbiJdLCJzb3VyY2VSb290IjoiIn0=