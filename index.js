(()=>{"use strict";var t={149:function(t,e,n){var o=this&&this.__createBinding||(Object.create?function(t,e,n,o){void 0===o&&(o=n),Object.defineProperty(t,o,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&o(e,t,n);return i(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GlobalEvents=void 0;const r=a(n(344)),s=l(n(576));e.GlobalEvents=class{constructor(){this._globalState=new r.default,this.onclick=t=>{t.target instanceof s.default&&(this._globalState=new r.default(r.PageType.article))},this.onpopstate=t=>{window.location.pathname.endsWith("/")&&(document.body.removeChild(document.querySelector("article")),this._globalState=new r.default(r.PageType.home))},window.onpopstate=this.onpopstate,window.onclick=this.onclick}get globalState(){return this._globalState}}},344:(t,e)=>{var n;Object.defineProperty(e,"__esModule",{value:!0}),e.PageType=void 0,function(t){t[t.home=0]="home",t[t.article=1]="article"}(n=e.PageType||(e.PageType={})),e.default=class{constructor(t=n.home){this.pageType=t,this.toString=()=>`Global State: {pageType: ${this.pageTypeAsString}}`}get pageTypeAsString(){return Object.values(n)[this.pageType]}}},576:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super(),this.link="",this.text="",this.fetchAppendArticle=()=>{fetch(this.link).then((t=>t.text())).then((t=>{const e=(new DOMParser).parseFromString(t,"text/html").querySelector("article");document.body.append(e)}))},this.onclick=t=>{t.preventDefault(),this.fetchAppendArticle();const e="articles/"+this.link.split("/")[2];history.pushState({page:e,url:e},this.text,e),this.remove()};const t=document.createElement("template");t.innerHTML=n.template,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0))}connectedCallback(){this.link=this.getAttribute("link"),this.text=this.getAttribute("text");const t=this.shadowRoot.querySelector("a");t.href=this.link,t.innerText=this.text}}e.default=n,n.tag="local-link",n.template='\n    <style>\n      a {\n        color: #E67D40;\n        text-decoration: none;\n      }\n    </style>\n    <a href=""></a>\n  '},607:function(t,e,n){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(149),a=o(n(576));customElements.define(a.default.tag,a.default),new i.GlobalEvents}},e={};!function n(o){if(e[o])return e[o].exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,